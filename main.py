# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
import requests
import random
import logging
import os
import threading
import socket
from datetime import datetime, time, timedelta
import time as std_time
import pytz

from answers import handle_direct_mention, handle_admin_commands

# –í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
from flask import Flask, jsonify

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
from supabase import create_client

# Telegram Bot API
from telegram import (Update, InlineKeyboardButton, InlineKeyboardMarkup,
                      ReplyKeyboardMarkup, ReplyKeyboardRemove,
                      ChatMemberUpdated, Chat, User, Message)
from telegram.constants import ParseMode, ChatMemberStatus
from telegram.error import TelegramError
from telegram.ext import (Application, CommandHandler, ContextTypes,
                          MessageHandler, filters, ConversationHandler,
                          CallbackQueryHandler, ChatMemberHandler, JobQueue)

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
file_handler = logging.FileHandler('bot.log', encoding='utf-8')
file_handler.setFormatter(
    logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

# –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É
logger = logging.getLogger()
logger.addHandler(file_handler)
logger.addHandler(logging.StreamHandler())  # –î–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
BOT_TOKEN = os.environ['BOT_TOKEN']
SUPABASE_URL = os.environ['SUPABASE_URL']
SUPABASE_KEY = os.environ['SUPABASE_KEY']

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
CHAT_ID = -1002773219368
ADMIN_USERNAME = "@coffeefin"
ADMIN_ID = 1318872684
SECRET_WORD = "–°–ª–æ–≤–æ"  # –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø—Ä–∞–≤–∏–ª
GROUP_LINK = "https://t.me/+2angY5dZi2YyZjY6"
TIKTOK_URL = "https://www.tiktok.com/@–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç"
RULES_TEXT = "üìú **–û—Ç–µ—Ü —Ç–µ—Ä–ø–µ—Ç—å –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π.**\n–ö–æ—Ä–æ—Ç–∫–æ: –Ω–µ —Å–ø–∞–º—å—Ç–µ, –Ω–µ —Å–ø–æ—Ä—å—Ç–µ, –Ω–µ —É–º–Ω–∏—á–∞–π—Ç–µ.\n–ê –µ—â—ë ‚Äî –Ω–∞–π–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –û–Ω–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è... –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ.\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: telegra.ph/Pravila-06-28-2"
REGIME_TEXT = "‚è∞ **–†–µ–∂–∏–º –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫:**\n‚óà –ü–ù-–°–ë ‚Äî 06:00-19:00 (–ú–°–ö)\n‚óà –í–° ‚Äî 08:00-19:00 (–ú–°–ö)\n\n–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫–∏ –≤–Ω–µ —ç—Ç–æ–≥–æ –æ–∫–Ω–∞. –î–∞–∂–µ –Ω–µ –ø—ã—Ç–∞–π—Å—è –æ–±–æ–π—Ç–∏ ‚Äî —è —Å–ª–µ–∂—É."
HELP_TEXT = """
üÜò <b>–ü–æ–º–æ—â—å:</b>
‚ñ™Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º ‚Üí @coffeefin
‚ñ™Ô∏è –ù–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏—è ‚Üí @coffeefin
‚ñ™Ô∏è –í–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤ ‚Üí @coffeefin
‚ñ™Ô∏è –ñ–∞–ª–æ–±—ã ‚Üí –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

‚ÑπÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help ‚Äî –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel_booking ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å —Ä–æ–ª–∏
"""

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_EMOJI = {"–°–≤–æ–±–æ–¥–µ–Ω": "üü¢", "–ë—Ä–æ–Ω—å": "üü°", "–ó–∞–Ω—è—Ç–∞": "üî¥"}

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø ConversationHandler =====
(SELECTING_REGION, SELECTING_CHARACTER, ENTERING_SECRET_WORD, ADMIN_PANEL,
 SWAP_ROLES_FIRST, SWAP_ROLES_SECOND, FORCE_CHANGE_ROLE_SELECT,
 FORCE_CHANGE_ROLE_STATUS, CONFIRM_UNBOOK, ADD_ROLE_NAME, ADD_ROLE_REGION, 
 ADD_ROLE_CONFIRM, DELETE_ROLE_SELECT, CONFIRM_DELETE_ROLE) = range(14)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# ===== –í–ï–ë-–°–ï–†–í–ï–† =====
app = Flask(__name__)


@app.route('/')
def home():
    return jsonify({
        "status": "online",
        "bot_name": "Telegram Bot",
        "message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
    })


@app.route('/health')
def health():
    return jsonify({"status": "healthy"})


@app.route('/stats')
def stats():
    try:
        roles = execute_supabase_query(
            supabase.table("roles").select("status"))
        if roles:
            stats = {
                "total_roles": len(roles),
                "free": len([r for r in roles if r["status"] == "–°–≤–æ–±–æ–¥–µ–Ω"]),
                "reserved": len([r for r in roles if r["status"] == "–ë—Ä–æ–Ω—å"]),
                "taken": len([r for r in roles if r["status"] == "–ó–∞–Ω—è—Ç–∞"])
            }
        else:
            stats = {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–ª—è—Ö"}
        return jsonify(stats)
    except Exception as e:
        return jsonify({"error": str(e)})


# –í–µ–±-—Å–µ—Ä–≤–µ—Ä
def run_web_server():
    port = int(os.environ.get("PORT", 8080))
    try:
        app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)
    except OSError as e:
        if "Address already in use" in str(e):
            print(f"üü† –ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ—Ä—Ç 8080")
            app.run(host="0.0.0.0", port=8080, debug=False, use_reloader=False)
            print(f"Flask –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}")


# ===== –£–¢–ò–õ–ò–¢–´ =====
def execute_supabase_query(query):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase"""
    try:
        response = query.execute()
        return response.data if hasattr(response, 'data') else None
    except Exception as e:
        logger.error(f"Supabase error: {e}")
        return None


# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def main_menu():
    return ReplyKeyboardMarkup(
        [["‚ãÑ‚îã‚≤¨‚≤û‚≥†‚≤® ‚≤Ç‚≤§‚≤¶‚≤®‚≤†‚≥ò‚≤¶–¨‚îã‚ãÑ"], ["‚ãÑ‚îã‚≤°‚≤£‚≤Å‚≤ÉœÖ‚≤ó‚≤Å‚îã‚ãÑ", "‚ãÑ‚îã‚≤£‚≤ü‚≤óœÖ‚îã‚ãÑ"],
         ["‚ãÑ‚îã‚≤£‚≤â‚≤ØœÖ‚≤ô ‚≤°‚≤£œÖ‚≤â‚≤ô‚≤Å ‚≥Ö‚≤Å—è‚≤É‚≤ü‚≤ï‚îã‚ãÑ"], ["‚ãÑ‚îã‚≤°‚≤ü‚≤ô‚≤ü‚≥É—å‚îã‚ãÑ", "‚ãÑ‚îã‚≤è‚≤Å‚≤± ‚≤¶‚≤ì‚≤ï‚≤¶‚≤ü‚≤ï‚îã‚ãÑ"]],
        resize_keyboard=True)


def regions_keyboard():
    return ReplyKeyboardMarkup(
        [["–ú–æ–Ω–¥—à—Ç–∞–¥—Ç", "–õ–∏ –Æ—ç"], ["–ò–Ω–∞–¥–∑—É–º–∞", "–°—É–º–µ—Ä—É"], ["–§–æ–Ω—Ç–µ–π–Ω", "–ù–∞—Ç–ª–∞–Ω"],
         ["–°–Ω–µ–∂–Ω–∞—è", "–î—Ä—É–≥–∏–µ"], ["üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]],
        resize_keyboard=True)


def characters_keyboard(region: str):
    try:
        roles = execute_supabase_query(
            supabase.table("roles").select("*").eq("region", region))
        keyboard = []
        for i in range(0, len(roles), 2):
            row = [roles[i]["name"]]
            if i + 1 < len(roles):
                row.append(roles[i + 1]["name"])
            keyboard.append(row)
        keyboard.append(["üîô –ö —Ä–µ–≥–∏–æ–Ω–∞–º"])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: {e}")
        return regions_keyboard()


def admin_inline_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîÄ –ü–æ–º–µ–Ω—è—Ç—å —Ä–æ–ª—è–º–∏", callback_data="admin_swap"),
            InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="admin_change_status")
        ],
        [
            InlineKeyboardButton("üîì –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_free"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_add_role")
        ],
        [
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å", callback_data="admin_delete_role"),
            InlineKeyboardButton("üìã –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏", callback_data="admin_current")
        ]
    ])


def status_inline_keyboard():
    return InlineKeyboardMarkup(
        [[
            InlineKeyboardButton("üü¢ –°–≤–æ–±–æ–¥–µ–Ω", callback_data="status_free"),
            InlineKeyboardButton("üü° –ë—Ä–æ–Ω—å", callback_data="status_reserved")
        ],
         [
             InlineKeyboardButton("üî¥ –ó–∞–Ω—è—Ç–∞", callback_data="status_taken"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
         ]])


# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type == "private":
        user = update.effective_user
        await update.message.reply_text(
            f"*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}.*\n\n"
            "–Ø ‚Äî –ö–ª–∏—Ñ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–ª—É–¥–∞ ¬´–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ–ª—É–¥–∞¬ª. "
            "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ–±—è –≤ —Å–≤—è—â–µ–Ω–Ω—ã–µ –∑–∞–ª—ã –Ω–∞—à–µ–≥–æ —á–∞—Ç–∞.\n\n"
            "üìú *–°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏:*\n"
            "1. –ü—Ä–∞–≤–∏–ª–∞ (–æ—Ç–µ—Ü —Ç–µ—Ä–ø–µ—Ç—å –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π)\n"
            "2. –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π\n"
            "3. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏—ë–º–∞ (–º—ã —Ç–æ–∂–µ –ª—é–±–∏–º –ø–æ—Å–ø–∞—Ç—å)\n\n"
            "–ö–æ–≥–¥–∞ –∏–∑—É—á–∏—à—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –∂–º–∏ *¬´–•–æ—á—É –≤—Å—Ç—É–ø–∏—Ç—å¬ª* –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
            parse_mode=ParseMode.HTML,
            reply_markup=main_menu())
    return ConversationHandler.END


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT, parse_mode=ParseMode.HTML)


async def show_tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üì± –¢—ã–∫–Ω–∏ —Å—é–¥–∞", url=TIKTOK_URL)]])
    await update.message.reply_text(
        "–¢—ã–∫–Ω–µ—à—å –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äî –ø–µ—Ä–µ–π–¥–µ—à—å –≤ –Ω–∞—à —Ç—Ç. –ù–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏.",
        reply_markup=keyboard)


async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT, parse_mode=ParseMode.MARKDOWN)


async def show_regime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(REGIME_TEXT, parse_mode=ParseMode.MARKDOWN)


async def show_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        roles = execute_supabase_query(supabase.table("roles").select("*"))

        text = "üìã *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–æ–ª–µ–π:*\n\n"
        text += f"{STATUS_EMOJI['–°–≤–æ–±–æ–¥–µ–Ω']} *–°–≤–æ–±–æ–¥–µ–Ω* ‚Äî –±–µ—Ä–∏, –ø–æ–∫–∞ –Ω–µ –∑–∞–Ω—è–ª–∏\n"
        text += f"{STATUS_EMOJI['–ë—Ä–æ–Ω—å']} *–ë—Ä–æ–Ω—å* ‚Äî –∫—Ç–æ-—Ç–æ —É–∂–µ –Ω–µ—Ä–≤–Ω–æ –∫—É—Å–∞–µ—Ç –Ω–æ–≥—Ç–∏\n"
        text += f"{STATUS_EMOJI['–ó–∞–Ω—è—Ç–∞']} *–ó–∞–Ω—è—Ç–∞* ‚Äî –¥–∞–∂–µ –Ω–µ –ø—ã—Ç–∞–π—Å—è\n\n"

        regions_order = [
            "–ú–æ–Ω–¥—à—Ç–∞–¥—Ç", "–õ–∏ –Æ—ç", "–ò–Ω–∞–¥–∑—É–º–∞", "–°—É–º–µ—Ä—É", "–§–æ–Ω—Ç–µ–π–Ω", "–ù–∞—Ç–ª–∞–Ω",
            "–°–Ω–µ–∂–Ω–∞—è", "–î—Ä—É–≥–∏–µ"
        ]

        for region in regions_order:
            region_roles = sorted([r for r in roles if r["region"] == region],
                                  key=lambda x: x["name"])
            if region_roles:
                text += f"\n*=== {region} ===*\n"
                for role in region_roles:
                    emoji = STATUS_EMOJI.get(role["status"], "‚ö™")
                    text += f"{emoji} {role['name']}\n"

        if len(text) > 3000:
            part1 = text[:3000].rsplit('\n', 1)[0]
            part2 = text[len(part1):]
            await update.message.reply_text(part1,
                                            parse_mode=ParseMode.MARKDOWN)
            await update.message.reply_text(part2,
                                            parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(text,
                                            parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–æ–ª–µ–π: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—Ç–µ—Ü –±—É–¥–µ—Ç –Ω–µ–¥–æ–≤–æ–ª–µ–Ω... –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π.")


async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        role = execute_supabase_query(
            supabase.table("roles").select("*").eq("user_id", user_id).eq(
                "status", "–ë—Ä–æ–Ω—å"))

        if role:
            role = role[0]
            execute_supabase_query(
                supabase.table("roles").update({
                    "status": "–°–≤–æ–±–æ–¥–µ–Ω",
                    "user_id": None,
                    "reserved_until": None
                }).eq("id", role["id"]))
            await update.message.reply_text(
                f"‚úÖ –ë—Ä–æ–Ω—å —Ä–æ–ª–∏ *{role['name']}* —Å–Ω—è—Ç–∞. –ö–∞–∫ –∂–∞–ª—å...",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=main_menu())
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π. –ò–ª–∏... —Ç—ã —É–∂–µ –ø–µ—Ä–µ–¥—É–º–∞–ª?",
                reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—Ç–µ—Ü —Ö–º—É—Ä–∏—Ç—Å—è... –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏.",
            reply_markup=main_menu())


# ===== –û–ë–†–ê–ë–û–¢–ö–ê –†–û–õ–ï–ô =====
async def start_role_selection(update: Update,
                               context: ContextTypes.DEFAULT_TYPE):
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        msk_tz = pytz.timezone('Europe/Moscow')
        now_msk = datetime.now(msk_tz)
        current_time = now_msk.time()
        weekday = now_msk.weekday()  # 0-–ø–Ω, 6-–≤—Å

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ø–æ –ú–°–ö)
        if (weekday < 6 and not (time(6, 0) <= current_time <= time(19, 0))) or \
           (weekday == 6 and not (time(8, 0) <= current_time <= time(19, 0))):

            await update.message.reply_text(
                "‚è≥ *–ù–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.*\n\n"
                f"–°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ: {now_msk.strftime('%H:%M')}\n\n"
                "–Ø –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞—è–≤–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∂–∏–º—É –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≤–∏–¥–∏–º–æ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª\n"
                "–ü—Ä–∏—Ö–æ–¥–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Å—ã ‚Äî –∏ –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –ø–æ–≤–µ–∑—ë—Ç.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=main_menu())
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        chat_member_count = await context.bot.get_chat_member_count(CHAT_ID)
        if chat_member_count >= 37:
            await update.message.reply_text(
                "‚õî *–ù–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç.*\n\n"
                f"–°–µ–π—á–∞—Å –≤ —á–∞—Ç–µ {chat_member_count}/35 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –º–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è...",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=main_menu())
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        await update.message.reply_text(
            "‚ö†Ô∏è –Ø –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            reply_markup=main_menu())
        return ConversationHandler.END

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    await update.message.reply_text(
        "–•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å? –°–º–µ–ª—ã–π –≤—ã–±–æ—Ä.\n–í—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω:",
        reply_markup=regions_keyboard())
    return SELECTING_REGION


async def select_region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    region = update.message.text
    if region == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                                        reply_markup=main_menu())
        return ConversationHandler.END

    context.user_data['region'] = region
    await update.message.reply_text(
        f"–†–µ–≥–∏–æ–Ω: *{region}*.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=characters_keyboard(region))
    return SELECTING_CHARACTER


async def select_character(update: Update, context: ContextTypes.DEFAULT_TYPE):
    character = update.message.text
    if character == "üîô –ö —Ä–µ–≥–∏–æ–Ω–∞–º":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω:",
                                        reply_markup=regions_keyboard())
        return SELECTING_REGION

    try:
        role = execute_supabase_query(
            supabase.table("roles").select("*").eq("name", character).eq(
                "region", context.user_data['region']))

        if not role:
            await update.message.reply_text(
                "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                reply_markup=characters_keyboard(context.user_data['region']))
            return SELECTING_CHARACTER

        role = role[0]
        context.user_data['role'] = role

        if role['status'] != "–°–≤–æ–±–æ–¥–µ–Ω":
            status_msg = {
                "–ë—Ä–æ–Ω—å": "—É–∂–µ –∫—Ç–æ-—Ç–æ –∫—É—Å–∞–µ—Ç –Ω–æ–≥—Ç–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏",
                "–ó–∞–Ω—è—Ç–∞": "–∫—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–Ω—è–ª"
            }.get(role['status'], "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

            await update.message.reply_text(
                f"‚ùå –†–æ–ª—å *{character}* {status_msg}. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–∞–¥–æ–ª–≥–æ –ª–∏? –í—ã–±–∏—Ä–∞–π –¥—Ä—É–≥—É—é.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=characters_keyboard(context.user_data['region']))
            return SELECTING_CHARACTER

        await update.message.reply_text(
            f"–†–æ–ª—å: *{character}*.\n\n"
            "–í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –î–∞, –æ–Ω–æ –µ—Å—Ç—å –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö. –ù–µ—Ç, —è –Ω–µ —Å–∫–∞–∂—É –∫–∞–∫–æ–µ.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardRemove())
        return ENTERING_SECRET_WORD

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—Ç–µ—Ü –±—É–¥–µ—Ç –Ω–µ–¥–æ–≤–æ–ª–µ–Ω... –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=main_menu())
        return ConversationHandler.END


async def check_secret_word(update: Update,
                            context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    role = context.user_data.get('role')

    if not role:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
                                        reply_markup=main_menu())
        return ConversationHandler.END

    if user_input.lower() == SECRET_WORD.lower():
        try:
            execute_supabase_query(
                supabase.table("roles").update({
                    "status":
                    "–ë—Ä–æ–Ω—å",
                    "user_id":
                    update.effective_user.id,
                    "reserved_until":
                    str(datetime.now() + timedelta(hours=2))
                }).eq("id", role["id"]))

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            if ADMIN_ID:
                try:
                    user = update.effective_user
                    username = f"@{user.username}" if user.username else user.first_name
                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=
                        f"üîî *–ù–æ–≤–∞—è –±—Ä–æ–Ω—å:*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n–†–æ–ª—å: {role['name']}",
                        parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

            await update.message.reply_text(
                f"‚úÖ –†–æ–ª—å *{role['name']}* —Ç–µ–ø–µ—Ä—å —Ç–≤–æ—è.\n\n"
                f"–°—Å—ã–ª–∫–∞: {GROUP_LINK}\n\n"
                "‚ö†Ô∏è *–£ —Ç–µ–±—è —Ä–æ–≤–Ω–æ 2 —á–∞—Å–∞:*\n"
                "1. –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç ‚Üí –∏–ª–∏\n"
                "2. –õ–∏—à–∏—Ç—å—Å—è –º–µ—Å—Ç–∞ ‚Üí –∏ –Ω–∞—á–∏–Ω–∞—Ç—å –≤—Å—ë —Å–Ω–∞—á–∞–ª–∞\n\n"
                "–î–æ—Ç—Ç–æ—Ä–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=main_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—Ç–µ—Ü —Ö–º—É—Ä–∏—Ç—Å—è... –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.",
                reply_markup=main_menu())
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –•–æ—á–µ—à—å –ø–æ–¥—Å–∫–∞–∑–∫—É? –ù–µ—Ç, –Ω–µ —Ö–æ—á–µ—à—å. –ß–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞.\n\n"
            "(–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel)",
            reply_markup=ReplyKeyboardRemove())
        return ENTERING_SECRET_WORD

    return ConversationHandler.END

async def check_expired_bookings(context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
        now = datetime.now(pytz.utc).isoformat()

        # –ò—â–µ–º –≤—Å–µ —Ä–æ–ª–∏ —Å –∏—Å—Ç—ë–∫—à–µ–π –±—Ä–æ–Ω–µ–π
        expired_roles = execute_supabase_query(
            supabase.table("roles")
            .select("*")
            .eq("status", "–ë—Ä–æ–Ω—å")
            .lt("reserved_until", now)  # –ò—â–µ–º –∑–∞–ø–∏—Å–∏, –≥–¥–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏ < —Ç–µ–∫—É—â–µ–≥–æ
        )

        if not expired_roles:
            return

        for role in expired_roles:
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–æ–ª—å
            execute_supabase_query(
                supabase.table("roles")
                .update({
                    "status": "–°–≤–æ–±–æ–¥–µ–Ω",
                    "user_id": None,
                    "reserved_until": None
                })
                .eq("id", role["id"])
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            if role["user_id"]:
                try:
                    await context.bot.send_message(
                        chat_id=role["user_id"],
                        text=f"‚åõ –í–∞—à–∞ –±—Ä–æ–Ω—å —Ä–æ–ª–∏ *{role['name']}* –∏—Å—Ç–µ–∫–ª–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?",
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {role['user_id']}: {e}")

        logger.info(f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {len(expired_roles)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±—Ä–æ–Ω–µ–π: {e}")
        await notify_admin(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—Ä–æ–Ω–µ–π: {str(e)}", context)

# ===== –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò =====
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username != "coffeefin" and user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END

    context.user_data.clear()
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_inline_keyboard())
    return ADMIN_PANEL


async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback

    logger.info(f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: –ø–æ–ª—É—á–µ–Ω callback - {query.data}")  # –õ–æ–≥–∏—Ä—É–µ–º

    try:
        if query.data == "admin_swap":
            context.user_data.clear()
            await query.edit_message_text(
                "üîÑ <b>–û–±–º–µ–Ω —Ä–æ–ª—è–º–∏</b>\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ü–ï–†–í–û–ô —Ä–æ–ª–∏:",
                parse_mode=ParseMode.HTML
            )
            return SWAP_ROLES_FIRST

        elif query.data == "admin_change_status":
            context.user_data.clear()
            await query.edit_message_text(
                "üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</b>\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–æ–ª–∏:",
                parse_mode=ParseMode.HTML
            )
            return FORCE_CHANGE_ROLE_SELECT

        elif query.data == "admin_free":
            context.user_data.clear()
            await query.edit_message_text(
                "üîì <b>–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–æ–ª–∏</b>\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–æ–ª–∏:",
                parse_mode=ParseMode.HTML
            )
            return FORCE_CHANGE_ROLE_SELECT

        elif query.data == "admin_add_role":
            context.user_data.clear()
            await query.edit_message_text(
                "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏</b>\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏:",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]]
                )
            )
            return ADD_ROLE_NAME

        elif query.data == "admin_delete_role":
            context.user_data.clear()
            await query.edit_message_text(
                "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏</b>\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]]
                )
            )
            return DELETE_ROLE_SELECT

        elif query.data == "admin_current":
            roles_data = execute_supabase_query(
                supabase.table("roles").select("name, user_id, status").neq("status", "–°–≤–æ–±–æ–¥–µ–Ω")
            )

            if not roles_data:
                await query.edit_message_text(
                    "‚ÑπÔ∏è –ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö —Ä–æ–ª–µ–π.",
                    reply_markup=admin_inline_keyboard()
                )
                return ADMIN_PANEL

            text = "<b>üìã –¢–µ–∫—É—â–∏–µ –∑–∞–Ω—è—Ç—ã–µ —Ä–æ–ª–∏:</b>\n\n"
            for role in roles_data:
                status_emoji = STATUS_EMOJI.get(role['status'], '‚ö™')
                text += f"{status_emoji} <b>{role['name']}</b> - "

                if role['user_id']:
                    try:
                        user = await context.bot.get_chat(role['user_id'])
                        username = f"@{user.username}" if user.username else user.first_name
                        text += f"{username}\n"
                    except Exception as e:
                        text += "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                else:
                    text += "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"

            await query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=admin_inline_keyboard()
            )
            return ADMIN_PANEL

        elif query.data.startswith("status_"):
            role = context.user_data.get('role_to_change')
            if not role:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ —É—Ç–µ—Ä—è–Ω—ã",
                    reply_markup=admin_inline_keyboard()
                )
                return ADMIN_PANEL

            status_map = {
                "status_free": ("–°–≤–æ–±–æ–¥–µ–Ω", None),
                "status_reserved": ("–ë—Ä–æ–Ω—å", str(datetime.now() + timedelta(hours=2))),
                "status_taken": ("–ó–∞–Ω—è—Ç–∞", None)
            }

            status_name, reserved_until = status_map.get(query.data, (None, None))

            if not status_name:
                await query.edit_message_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å",
                    reply_markup=admin_inline_keyboard()
                )
                return ADMIN_PANEL

            try:
                update_data = {"status": status_name, "reserved_until": reserved_until}

                if status_name != "–°–≤–æ–±–æ–¥–µ–Ω":
                    update_data["user_id"] = role.get("user_id")

                execute_supabase_query(
                    supabase.table("roles")
                    .update(update_data)
                    .eq("id", role["id"])
                )

                await query.edit_message_text(
                    f"‚úÖ –°—Ç–∞—Ç—É—Å —Ä–æ–ª–∏ <b>{role['name']}</b> –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_name}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=admin_inline_keyboard()
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
                await query.edit_message_text(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞",
                    reply_markup=admin_inline_keyboard()
                )
            return ADMIN_PANEL

        elif query.data == "confirm_add_role":
            return await confirm_add_role(update, context)

        elif query.data == "confirm_delete_role":
            return await confirm_delete_role(update, context)

        elif query.data == "admin_cancel":
            await query.edit_message_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=admin_inline_keyboard()
            )
            return ADMIN_PANEL

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {query.data}")
            await query.edit_message_text(
                "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                reply_markup=admin_inline_keyboard()
            )
            return ADMIN_PANEL

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_button_handler: {str(e)}")
        await query.edit_message_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=admin_inline_keyboard()
        )
        return ADMIN_PANEL


async def handle_swap_roles_first(update: Update,
                                  context: ContextTypes.DEFAULT_TYPE):
    role_name = update.message.text
    role = execute_supabase_query(
        supabase.table("roles").select("*").eq("name", role_name))

    if not role:
        await update.message.reply_text("‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return SWAP_ROLES_FIRST

    context.user_data['first_role'] = role[0]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –í–¢–û–†–û–ô —Ä–æ–ª–∏ –¥–ª—è –æ–±–º–µ–Ω–∞:")
    return SWAP_ROLES_SECOND


async def handle_swap_roles_second(update: Update,
                                   context: ContextTypes.DEFAULT_TYPE):
    second_role_name = update.message.text
    first_role = context.user_data.get('first_role')

    if not first_role:
        await update.message.reply_text("‚ùå –ü–µ—Ä–≤–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return ADMIN_PANEL

    second_role = execute_supabase_query(
        supabase.table("roles").select("*").eq("name", second_role_name))

    if not second_role:
        await update.message.reply_text("‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return SWAP_ROLES_SECOND

    second_role = second_role[0]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
    execute_supabase_query(
        supabase.table("roles").update({
            "user_id": second_role["user_id"],
            "status": second_role["status"]
        }).eq("id", first_role["id"]))

    execute_supabase_query(
        supabase.table("roles").update({
            "user_id": first_role["user_id"],
            "status": first_role["status"]
        }).eq("id", second_role["id"]))

    await update.message.reply_text(
        f"‚úÖ –†–æ–ª–∏ –æ–±–º–µ–Ω—è–Ω—ã:\n"
        f"{first_role['name']} ‚Üî {second_role['name']}",
        reply_markup=admin_inline_keyboard())
    return ADMIN_PANEL


async def handle_select_role_for_status(update: Update,
                                        context: ContextTypes.DEFAULT_TYPE):
    role_name = update.message.text
    role = execute_supabase_query(
        supabase.table("roles").select("*").eq("name", role_name))

    if not role:
        await update.message.reply_text("‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return FORCE_CHANGE_ROLE_SELECT

    context.user_data['role_to_change'] = role[0]
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ä–æ–ª–∏ {role_name}:",
        reply_markup=status_inline_keyboard())
    return FORCE_CHANGE_ROLE_STATUS


async def handle_select_role_for_free(update: Update,
                                      context: ContextTypes.DEFAULT_TYPE):
    role_name = update.message.text
    role = execute_supabase_query(
        supabase.table("roles").select("*").eq("name", role_name))

    if not role:
        await update.message.reply_text("‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return FORCE_CHANGE_ROLE_SELECT

    role = role[0]
    user_id = role["user_id"]

    execute_supabase_query(
        supabase.table("roles").update({
            "status": "–°–≤–æ–±–æ–¥–µ–Ω",
            "user_id": None,
            "reserved_until": None
        }).eq("id", role["id"]))

    if user_id:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω—è–ª –≤–∞—à—É –±—Ä–æ–Ω—å —Ä–æ–ª–∏ {role['name']}",
                parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await update.message.reply_text(f"‚úÖ –†–æ–ª—å {role['name']} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞!",
                                    reply_markup=admin_inline_keyboard())
    return ADMIN_PANEL

async def add_role_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role_name = update.message.text
    existing_role = execute_supabase_query(
        supabase.table("roles").select("*").eq("name", role_name)
    )

    if existing_role:
        await update.message.reply_text(
            "‚ùå –†–æ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]])
        )
        return ADD_ROLE_NAME

    context.user_data['new_role'] = {'name': role_name}
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏ (–ú–æ–Ω–¥—à—Ç–∞–¥—Ç, –õ–∏ –Æ—ç, –ò–Ω–∞–¥–∑—É–º–∞ –∏ —Ç.–¥.):",
        reply_markup=ReplyKeyboardRemove()
    )
    return ADD_ROLE_REGION

async def add_role_region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    region = update.message.text
    context.user_data['new_role']['region'] = region
    role = context.user_data['new_role']

    await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏:\n\n"
        f"–ò–º—è: {role['name']}\n"
        f"–†–µ–≥–∏–æ–Ω: {role['region']}\n\n"
        f"–°—Ç–∞—Ç—É—Å: –°–≤–æ–±–æ–¥–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add_role")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_cancel")]
        ])
    )
    return ADD_ROLE_CONFIRM

async def confirm_add_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    role = context.user_data['new_role']

    try:
        execute_supabase_query(
            supabase.table("roles").insert({
                "name": role['name'],
                "region": role['region'],
                "status": "–°–≤–æ–±–æ–¥–µ–Ω",
                "user_id": None,
                "reserved_until": None
            })
        )
        await query.edit_message_text(
            f"‚úÖ –†–æ–ª—å {role['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=admin_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
            reply_markup=admin_inline_keyboard()
        )

    return ADMIN_PANEL

async def delete_role_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    role_name_to_delete = update.message.text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è —Ä–æ–ª—å –≤ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    role = execute_supabase_query(supabase.table("roles").select("*").eq("name", role_name_to_delete)) # 
    if not role:
        await update.message.reply_text(
            f"‚ùå –†–æ–ª—å '{role_name_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ä–æ–ª–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(" ‚ùå   –û—Ç–º–µ–Ω–∞ ", callback_data="admin_cancel")]]) # 
        )
        return DELETE_ROLE_SELECT # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏–ª–∏ –æ—Ç–º–µ–Ω—É

    context.user_data['role_to_delete'] = role[0] # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ '{role_name_to_delete}'", callback_data="confirm_delete_role")], # 
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")] # 
    ])
    await update.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å '{role_name_to_delete}'? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=keyboard
    )
    return CONFIRM_DELETE_ROLE # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

async def confirm_delete_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ admin_button_handler.
    """
    query = update.callback_query
    await query.answer()

    role_to_delete = context.user_data.get('role_to_delete')
    if not role_to_delete:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –†–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=admin_inline_keyboard() # 
        )
        return ADMIN_PANEL

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
        execute_supabase_query(supabase.table("roles").delete().eq("id", role_to_delete["id"])) # 

        await query.edit_message_text(
            f"‚úÖ –†–æ–ª—å '{role_to_delete['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=admin_inline_keyboard() # 
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ {role_to_delete['name']}: {e}") # 
        await query.edit_message_text(
            f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ '{role_to_delete['name']}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=admin_inline_keyboard() # 
        )
    finally:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        if 'role_to_delete' in context.user_data:
            del context.user_data['role_to_delete']

    return ADMIN_PANEL # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

async def back_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                                    reply_markup=admin_inline_keyboard())
    return ADMIN_PANEL


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    return ConversationHandler.END


async def cancel_conversation(update: Update,
                              context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_menu()
        if update.effective_chat.type == "private" else None)
    return ConversationHandler.END


# ===== –û–ë–†–ê–ë–û–¢–ö–ê –£–ß–ê–°–¢–ù–ò–ö–û–í =====
async def handle_participant_update(update: Update,
                                    context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.chat_member:
            await process_chat_member_change(update.chat_member, context)
        elif update.message:
            if update.message.new_chat_members:
                for user in update.message.new_chat_members:
                    await process_new_member(user, update.message.chat,
                                             context)
            elif update.message.left_chat_member:
                await process_left_member(update.message.left_chat_member,
                                          update.message.chat, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        await notify_admin(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}", context)


async def process_chat_member_change(chat_member: ChatMemberUpdated,
                                     context: ContextTypes.DEFAULT_TYPE):
    if chat_member.chat.id != CHAT_ID:
        return

    old = chat_member.old_chat_member
    new = chat_member.new_chat_member
    user = new.user

    if (new.status == ChatMemberStatus.MEMBER and old.status not in [
            ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.OWNER
    ]):
        await process_new_member(user, chat_member.chat, context)
    elif (new.status in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]
          and old.status in [
              ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR,
              ChatMemberStatus.OWNER
          ]):
        await process_left_member(user, chat_member.chat, context)


async def process_new_member(user: User, chat: Chat,
                             context: ContextTypes.DEFAULT_TYPE):
    if user.id == context.bot.id:
        return

    role = execute_supabase_query(
        supabase.table("roles").select("*").eq("user_id", user.id).neq(
            "status", "–°–≤–æ–±–æ–¥–µ–Ω"))

    if role:
        role = role[0]
        execute_supabase_query(
            supabase.table("roles").update({
                "status": "–ó–∞–Ω—è—Ç–∞",
                "reserved_until": None
            }).eq("id", role["id"]))

        await context.bot.send_message(
            chat_id=chat.id,
            text=
            f"‚úÖ {user.mention_html()} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–æ–ª—å <b>{role['name']}</b>. –û—Ç–µ—Ü –¥–æ–≤–æ–ª–µ–Ω.",
            parse_mode=ParseMode.HTML)
    else:
        warning_text = (
            f"üö® –¢—Ä–µ–≤–æ–≥–∞! {user.mention_html()} –≤–æ—Ä–≤–∞–ª—Å—è –±–µ–∑ –±—Ä–æ–Ω–∏! "
            f"–û—Ç–µ—Ü, –≤–µ—Ä–Ω–∏—Å—å –≤ —á–∞—Ç {ADMIN_USERNAME}")

        await context.bot.send_message(chat_id=chat.id,
                                       text=warning_text,
                                       parse_mode=ParseMode.HTML)

        if ADMIN_ID:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üö® –ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user.mention_html()}",
                parse_mode=ParseMode.HTML)


async def process_left_member(user: User, chat: Chat,
                              context: ContextTypes.DEFAULT_TYPE):
    role = execute_supabase_query(
        supabase.table("roles").select("*").eq("user_id",
                                               user.id).eq("status", "–ó–∞–Ω—è—Ç–∞"))

    if role:
        role = role[0]
        execute_supabase_query(
            supabase.table("roles").update({
                "status":
                "–ë—Ä–æ–Ω—å",
                "reserved_until":
                str(datetime.now() + timedelta(hours=24))
            }).eq("id", role["id"]))

        await notify_admin(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention_html()} –≤—ã—à–µ–ª. –†–æ–ª—å {role['name']} –Ω–∞ –±—Ä–æ–Ω–∏ 24—á.",
            context)


async def handle_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ö–ª–∏—Ñ–∞"""
    try:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if update.effective_user.is_bot:
            return

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_response = await handle_admin_commands(update, context)
        if admin_response:
            await update.message.reply_text(admin_response)
            return

        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ö–ª–∏—Ñ—É
        cliff_response = await handle_direct_mention(update, context)
        if cliff_response:
            await update.message.reply_text(cliff_response)
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# ===== –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
def setup_role_selection_conversation():
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("‚ãÑ‚îã‚≤¨‚≤û‚≥†‚≤® ‚≤Ç‚≤§‚≤¶‚≤®‚≤†‚≥ò‚≤¶–¨‚îã‚ãÑ"),
                           start_role_selection)
        ],
        states={
            SELECTING_REGION:
            [MessageHandler(filters.TEXT & ~filters.COMMAND, select_region)],
            SELECTING_CHARACTER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               select_character)
            ],
            ENTERING_SECRET_WORD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               check_secret_word)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)])


def setup_admin_conversation():
    return ConversationHandler(
        entry_points=[CommandHandler('admin', admin_command)],
        states={
            ADMIN_PANEL: [
                CallbackQueryHandler(admin_button_handler)
            ],
            SWAP_ROLES_FIRST: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_swap_roles_first
                )
            ],
            SWAP_ROLES_SECOND: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_swap_roles_second
                )
            ],
            FORCE_CHANGE_ROLE_SELECT: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_select_role_for_status
                ),
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    handle_select_role_for_free
                )
            ],
            FORCE_CHANGE_ROLE_STATUS: [
                CallbackQueryHandler(
                    admin_button_handler,
                    pattern="^status_"
                )
            ],
            ADD_ROLE_NAME: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    add_role_name
                )
            ],
            ADD_ROLE_REGION: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    add_role_region
                )
            ],
            ADD_ROLE_CONFIRM: [
                CallbackQueryHandler(
                    admin_button_handler,
                    pattern="^confirm_add_role$"
                ),
                CallbackQueryHandler(
                    admin_button_handler,
                    pattern="^admin_cancel$"
                )
            ],
            DELETE_ROLE_SELECT: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    delete_role_select
                )
            ],
            CONFIRM_DELETE_ROLE: [
                CallbackQueryHandler(
                    admin_button_handler,
                    pattern="^confirm_delete_role$"
                ),
                CallbackQueryHandler(
                    admin_button_handler,
                    pattern="^admin_cancel$"
                )
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel_conversation),
            MessageHandler(
                filters.Regex(r'^üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é$'),
                back_to_menu
            )
        ],
        allow_reentry=True  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥
    )


def test_apis():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    try:
        # –¢–µ—Å—Ç Telegram API
        from telegram import __version__
        print(f"Telegram API: OK (v{__version__})")

        # –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ Supabase (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
        if os.environ.get('SUPABASE_URL') and os.environ.get('SUPABASE_KEY'):
            print("Supabase: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
            supabase = create_client(os.environ['SUPABASE_URL'],
                                     os.environ['SUPABASE_KEY'])
            print("Supabase: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(
                "Supabase: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É)"
            )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        raise

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def main():
    try:
        logger.info("üü¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")

        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        web_thread = threading.Thread(target=run_web_server, daemon=True)
        web_thread.start()
        logger.info("üü¢ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        telegram_app = Application.builder().token(BOT_TOKEN).build()
        logger.info("üü¢ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
        telegram_app.job_queue.run_repeating(
            check_expired_bookings,
            interval=600,  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            first=10       # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        )

        # 1. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        telegram_app.add_handler(CommandHandler("start", start))
        telegram_app.add_handler(CommandHandler("help", show_help))
        telegram_app.add_handler(CommandHandler("admin", admin_command)) 
        telegram_app.add_handler(CommandHandler("cancel_booking", cancel_booking))

        # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        telegram_app.add_handler(MessageHandler(filters.Regex(r"‚ãÑ‚îã‚≤°‚≤£‚≤Å‚≤ÉœÖ‚≤ó‚≤Å‚îã‚ãÑ"), show_rules))
        telegram_app.add_handler(MessageHandler(filters.Regex(r"‚ãÑ‚îã‚≤£‚≤ü‚≤óœÖ‚îã‚ãÑ"), show_roles))
        telegram_app.add_handler(MessageHandler(filters.Regex(r"‚ãÑ‚îã‚≤£‚≤â‚≤ØœÖ‚≤ô ‚≤°‚≤£œÖ‚≤â‚≤ô‚≤Å ‚≥Ö‚≤Å—è‚≤É‚≤ü‚≤ï‚îã‚ãÑ"), show_regime))
        telegram_app.add_handler(MessageHandler(filters.Regex(r"‚ãÑ‚îã‚≤°‚≤ü‚≤ô‚≤ü‚≥É—å‚îã‚ãÑ"), show_help))
        telegram_app.add_handler(MessageHandler(filters.Regex(r"‚ãÑ‚îã‚≤è‚≤Å‚≤± ‚≤¶‚≤ì‚≤ï‚≤¶‚≤ü‚≤ï‚îã‚ãÑ"), show_tiktok))

        # 3. –î–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        telegram_app.add_handler(setup_role_selection_conversation())
        telegram_app.add_handler(setup_admin_conversation())
        telegram_app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.ChatType.GROUPS,
            handle_answers,
        ))

        # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        telegram_app.add_handler(ChatMemberHandler(handle_participant_update))
        telegram_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_participant_update))
        telegram_app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, handle_participant_update))

        logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        telegram_app.run_polling()

    except Exception as e:
        logger.critical(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise  # –î–æ–±–∞–≤–∏–º raise —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å traceback


logging.basicConfig(filename='bot.log',
                    level=logging.INFO,
                    format='%(asctime)s - %(message)s')


def auto_clean_memory():
    import gc
    while True:
        gc.collect()
        std_time.sleep(3600)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å

@app.route('/ping')
def ping():
    logger.info("–°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ /ping")
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ"

@app.route('/uptime')
def uptime_check():
    return jsonify({"status": "OK", "bot": "active"}), 200

def self_ping():
    while True:
        try:
            url = "https://19a05b27-e552-4557-a606-6cf696041329-00-3rt5hv6j3qqnl.kirk.replit.dev:8080/"
            requests.get(url, timeout=5)
            print(f"‚úÖ –°–∞–º–æ–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {url}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        std_time.sleep(25 * 60 + random.randint(-120, 120))

if __name__ == '__main__':
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        telegram_app = Application.builder().token(BOT_TOKEN).build()
        logger.info("üü¢ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
        telegram_app.job_queue.run_repeating(
            check_expired_bookings,
            interval=600,
            first=10
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–≤–∞—à –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        telegram_app.add_handler(CommandHandler("start", start))
        telegram_app.add_handler(CommandHandler("help", show_help))
        telegram_app.add_handler(CommandHandler("admin", admin_command)) 
        telegram_app.add_handler(CommandHandler("cancel_booking", cancel_booking))
        telegram_app.add_handler(MessageHandler(filters.Regex(r"‚ãÑ‚îã‚≤°‚≤£‚≤Å‚≤ÉœÖ‚≤ó‚≤Å‚îã‚ãÑ"), show_rules))
        telegram_app.add_handler(MessageHandler(filters.Regex(r"‚ãÑ‚îã‚≤£‚≤ü‚≤óœÖ‚îã‚ãÑ"), show_roles))
        telegram_app.add_handler(MessageHandler(filters.Regex(r"‚ãÑ‚îã‚≤£‚≤â‚≤ØœÖ‚≤ô ‚≤°‚≤£œÖ‚≤â‚≤ô‚≤Å ‚≥Ö‚≤Å—è‚≤É‚≤ü‚≤ï‚îã‚ãÑ"), show_regime))
        telegram_app.add_handler(MessageHandler(filters.Regex(r"‚ãÑ‚îã‚≤°‚≤ü‚≤ô‚≤ü‚≥É—å‚îã‚ãÑ"), show_help))
        telegram_app.add_handler(MessageHandler(filters.Regex(r"‚ãÑ‚îã‚≤è‚≤Å‚≤± ‚≤¶‚≤ì‚≤ï‚≤¶‚≤ü‚≤ï‚îã‚ãÑ"), show_tiktok))
        telegram_app.add_handler(setup_role_selection_conversation())
        telegram_app.add_handler(setup_admin_conversation())
        telegram_app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.ChatType.GROUPS,
            handle_answers,
        ))
        telegram_app.add_handler(ChatMemberHandler(handle_participant_update))
        telegram_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_participant_update))
        telegram_app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, handle_participant_update))

        logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è Railway)
        telegram_app.run_polling()

    except Exception as e:
        logger.critical(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
